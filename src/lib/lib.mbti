package CAIMEOX/quickcheck/lib

alias @CAIMEOX/quickcheck/lib/feat as @feat
alias @CAIMEOX/quickcheck/lib/rose as @rose
alias @CAIMEOX/quickcheck/lib/splitmix as @splitmix
alias @moonbitlang/core/immut/list as @list

// Values
fn alphabet() -> Gen[Char]

fn associative[A : Eq]((A, A) -> A) -> (Tuple[A, A, A]) -> Bool

fn callback[P : Testable](Callback) -> (P) -> Property

fn char_range(Char, Char) -> Gen[Char]

fn check_one[T : Eq](Config, Property_Old[T]) -> TestResult[T]

fn check_verbose[T : Eq + Show](Config, Property_Old[T]) -> TestResult[T]

fn classify[P : Testable](Bool, String) -> (P) -> Property

fn collect[P : Testable, T : Show](T) -> (P) -> Property

fn commutative[A, B : Eq]((A, A) -> B) -> (Tuple[A, A]) -> Bool

fn counterexample[P : Testable](String) -> (P) -> Property

fn distributive_left[A : Eq]((A, A) -> A, (A, A) -> A) -> (Tuple[A, A, A]) -> Bool

fn distributive_right[A : Eq]((A, A) -> A, (A, A) -> A) -> (Tuple[A, A, A]) -> Bool

fn expect_fail[P : Testable](P) -> Property

fn ext_equal[A, B : Eq]((A) -> B, (A) -> B) -> (A) -> Bool

fn failed() -> SingleResult

fn flatten_array[T](Array[Gen[T]]) -> Gen[Array[T]]

fn flatten_list[T](@list.T[Gen[T]]) -> Gen[@list.T[T]]

fn flatten_option[T](Gen[T]?) -> Gen[T?]

fn flatten_result[T, E](Result[Gen[T], E]) -> Gen[Result[T, E]]

fn forall[T : Testable, A : Arbitrary + Shrink]((A) -> T) -> Property

fn forall_show[T : Testable, A : Arbitrary + Shrink + Show]((A) -> T) -> Property

fn frequency[T](Array[Tuple[Int, Gen[T]]]) -> Gen[T]

fn frequency_list[T](@list.T[Tuple[Int, T]]) -> Gen[T]

fn idempotent[A : Eq]((A) -> A) -> (A) -> Bool

fn if_fail[P : Testable](() -> Unit) -> (P) -> Property

fn implies[P : Testable](Bool) -> (P) -> Property

fn int_bound(Int) -> Gen[Int]

fn int_range(Int, Int) -> Gen[Int]

fn integer_bound(BigInt) -> Gen[BigInt]

fn inverse[A : Eq, B]((A) -> B, (B) -> A) -> (A) -> Bool

fn involutory[A : Eq]((A) -> A) -> (A) -> Bool

fn label[P : Testable](String) -> (P) -> Property

fn liftA2[A, B, C]((A, B) -> C, Gen[A], Gen[B]) -> Gen[C]

fn liftA3[A, B, C, D]((A, B, C) -> D, Gen[A], Gen[B], Gen[C]) -> Gen[D]

fn liftA4[A, B, C, D, E]((A, B, C, D) -> E, Gen[A], Gen[B], Gen[C], Gen[D]) -> Gen[E]

fn liftA5[A, B, C, D, E, F]((A, B, C, D, E) -> F, Gen[A], Gen[B], Gen[C], Gen[D], Gen[E]) -> Gen[F]

fn liftA6[A, B, C, D, E, F, G]((A, B, C, D, E, F) -> G, Gen[A], Gen[B], Gen[C], Gen[D], Gen[E], Gen[F]) -> Gen[G]

fn linear_shrink[T](Int, (T) -> Iter[T], (T) -> Bool, ~init : T) -> Tuple[Int, T]

fn list_with_size[T](Int, Gen[T]) -> Gen[@list.T[T]]

fn local_min_found(State, SingleResult) -> Tuple[Int, Int, Int, SingleResult]

fn map_prop[P : Testable](P, (Prop) -> Prop) -> Property

fn map_rose_result[P : Testable](P, (@rose.Rose[SingleResult]) -> @rose.Rose[SingleResult]) -> Property

fn map_size[P : Testable]((Int) -> Int) -> (P) -> Property

fn map_total_result[P : Testable](P, (SingleResult) -> SingleResult) -> Property

fn mono_decrease[A : Compare + Eq, B : Compare + Eq]((A) -> B) -> (Tuple[A, A]) -> Bool

fn mono_increase[A : Compare + Eq, B : Compare + Eq]((A) -> B) -> (Tuple[A, A]) -> Bool

fn nat() -> Gen[Int]

fn neg_int() -> Gen[Int]

fn numeral() -> Gen[Char]

fn one_of[T](Array[Gen[T]]) -> Gen[T]

fn one_of_array[T](Array[T]) -> Gen[T]

fn one_of_list[T](@list.T[T]) -> Gen[T]

fn pure[T](T) -> Gen[T]

fn pure_eq[T](T) -> Equivalence[T]

fn quad[T, U, V, W](Gen[T], Gen[U], Gen[V], Gen[W]) -> Gen[Tuple[T, U, V, W]]

fn quick_check[T : Arbitrary + Shrink + Eq]((T) -> Bool) -> TestResult[T]

fn quick_check1[P : Testable](P) -> Unit

fn quick_check_fn[A : Arbitrary + Shrink + Show, B : Testable]((A) -> B) -> Unit

fn quick_check_verbose[T : Arbitrary + Eq + Shrink + Show]((T) -> Bool) -> TestResult[T]

fn quick_check_with[P : Testable](Args, P) -> Unit

fn quick_check_with_result[P : Testable](Args, P) -> TotalResult

fn rejected() -> SingleResult

fn shrinking[P : Testable, T]((T) -> Iter[T], T, (T) -> P) -> Property

fn sized[T]((Int) -> Gen[T]) -> Gen[T]

fn small_int() -> Gen[Int]

fn sorted_list[T : Compare + Eq](Int, Gen[T]) -> Gen[@list.T[T]]

fn succeed() -> SingleResult

fn terminate[P : Testable](P) -> Property

fn triple[T, U, V](Gen[T], Gen[U], Gen[V]) -> Gen[Tuple[T, U, V]]

fn tuple[T, U](Gen[T], Gen[U]) -> Gen[Tuple[T, U]]

fn with_discarded_ratio[P : Testable](Int) -> (P) -> Property

fn with_law[T : Arbitrary + Shrink]((T) -> Bool) -> Property_Old[T]

fn with_law_fe[T : @feat.Enumerable]((T) -> Bool, Int) -> Property_Old[T]

fn with_max_shrink(Int, ~cfg : Config = ..) -> Config

fn with_max_shrinks[P : Testable](Int) -> (P) -> Property

fn with_max_size[P : Testable](Int) -> (P) -> Property

fn with_max_successs[P : Testable](Int) -> (P) -> Property

fn with_max_test(Int, ~cfg : Config = ..) -> Config

fn with_name(String, ~cfg : Config = ..) -> Config

fn with_seed(UInt64, ~cfg : Config = ..) -> Config

// Types and methods
type Args

type Arrow

type ArrowError

type Axiom
impl Axiom {
  new[T]((T) -> Equivalence[T]) -> Self[T]
  run[T](Self[T], T) -> Equivalence[T]
  to_property[T, U](Self[T], (T) -> U, (U, U) -> Bool) -> (T) -> Bool
  to_property_eq[T, U : Eq](Self[T], (T) -> U) -> (T) -> Bool
  to_property_parametric[T, M, N](Self[T], (T, M) -> N, (N, N) -> Bool) -> (Tuple[T, M]) -> Bool
  to_property_parametric_eq[T, M, N : Eq](Self[T], (T, M) -> N) -> (Tuple[T, M]) -> Bool
}

type Callback
impl Callback {
  to_string(Self) -> String
}

type Config

type Coverage
impl Coverage {
  new() -> Self
}

type Discard

type Equivalence
impl Equivalence {
  ap[T, U](Self[(T) -> U], Self[T]) -> Self[U]
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  equal_by[T](Self[T], (T, T) -> Bool) -> Bool
  fmap[T, U](Self[T], (T) -> U) -> Self[U]
  is_equal[T : Eq](Self[T]) -> Bool
  new[T](T, T) -> Self[T]
  to_string[T : Show](Self[T]) -> String
}

type Forest
impl Forest {
  to_string[T : Show](Self[T]) -> String
}

type Gen
impl Gen {
  ap[T, U](Self[(T) -> U], Self[T]) -> Self[U]
  array_with_size[T](Self[T], Int) -> Self[Array[T]]
  bind[T, U](Self[T], (T) -> Self[U]) -> Self[U]
  feat_random[T : @feat.Enumerable](Int) -> Self[T]
  fmap[T, U](Self[T], (T) -> U) -> Self[U]
  join[T](Self[Self[T]]) -> Self[T]
  new[T]((Int, @splitmix.RandomState) -> T) -> Self[T]
  resize[T](Self[T], Int) -> Self[T]
  run[T](Self[T], Int, @splitmix.RandomState) -> T
  sample[T](Self[T], ~seed : UInt64 = ..) -> T
  samples[T](Self[T], ~size : Int = .., ~seed : UInt64 = ..) -> Array[T]
  scale[T](Self[T], (Int) -> Int) -> Self[T]
  spawn[T : Arbitrary]() -> Self[T]
  such_that[T](Self[T], (T) -> Bool) -> Self[T]
  such_that_maybe[T](Self[T], (T) -> Bool) -> Self[T?]
}

type InternalError

type Kind
impl Kind {
  to_string(Self) -> String
}

type LabelRecord
impl LabelRecord {
  classify_it[T](Self[T], T) -> Unit
  make[T]((T) -> String) -> Self[T]
  to_string[T : Show](Self[T]) -> Array[String]
}

type ListCompare
impl ListCompare {
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
}

type Nat
impl Nat {
  to_string(Self) -> String
}

pub enum Outcome {
  Success
  GaveUp
  Fail(T)
}
impl Outcome {
  output[T](Self[T], Logger) -> Unit
  to_string[T](Self[T]) -> String
  to_string_colored[T](Self[T]) -> String
}

type Printer
impl Printer {
  format(Self, String) -> String
  from_buffer(Buffer) -> Self
  ident(Self, ~size : Int = ..) -> Unit
  print(Self, String) -> Unit
  to_string(Self) -> String
  unident(Self) -> Unit
}

type Prop
impl Prop {
  make(@rose.Rose[SingleResult]) -> Self
}

type Property
impl Property {
  make(Gen[Prop]) -> Self
}

type Property_Old
impl Property_Old {
  with_classify[T](Self[T], (T) -> String) -> Self[T]
  with_filter[T](Self[T], (T) -> Bool) -> Self[T]
  with_generator[T](Self[T], Gen[T]) -> Self[T]
  with_shrinker[T](Self[T], (T) -> Iter[T]) -> Self[T]
}

pub struct Replay {
  pub rand_state : @splitmix.RandomState
  pub size : Int
}
impl Replay {
  new(@splitmix.RandomState, Int) -> Self
}

type SingleResult
impl SingleResult {
  to_string(Self) -> String
}

type SingleTree
impl SingleTree {
  to_string(Self) -> String
}

type State
impl State {
  complete_test(Self, Property) -> TotalResult
  found_failure(Self, SingleResult, Iter[@rose.Rose[SingleResult]]) -> Tuple[Int, Int, Int, SingleResult]
  give_up(Self, Property) -> TotalResult
  local_min(Self, SingleResult, Iter[@rose.Rose[SingleResult]]) -> Tuple[Int, Int, Int, SingleResult]
  run_single_test(Self, Property) -> TotalResult
  run_test(Self, Property) -> TotalResult
}

type TestResult
impl TestResult {
  output[T : Show](Self[T], Logger) -> Unit
  to_string[T : Show](Self[T]) -> String
}

type TotalResult
impl TotalResult {
  success(Self) -> Bool
}

type Tree
impl Tree {
  to_string[T : Show](Self[T]) -> String
}

// Type aliases
pub typealias RandomState = @splitmix.RandomState

// Traits
pub trait Arbitrary {
  arbitrary(Int, @splitmix.RandomState) -> Self
}

pub trait Shrink {
  shrink(Self) -> Iter[Self]
}

pub trait Testable {
  property(Self) -> Property
}

// Extension Methods
impl Shrink for Shrink

impl Show for Callback

impl Show for Equivalence

impl Show for Forest

impl Show for Kind

impl Show for Nat

impl Show for SingleResult

impl Show for SingleTree

impl Show for Tree

